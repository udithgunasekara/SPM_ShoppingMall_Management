import React, { useState } from 'react';
import Modal from '../common/Modal';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { useAppContext } from '../../context/AppContext';

const EventsContent = ({ handleEditEvent, handleDeleteEvent, setIsEventFormOpen }) => {
  const [selectedImage, setSelectedImage] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [pdfDownloadProgress, setPdfDownloadProgress] = useState(0);

  const { events, deleteEvent } = useAppContext();

  const formatEventData = (event) => {
    return {
      ...event,
      date: formatTimestamp(event.date),
      time: formatTimestamp(event.time),
    };
  };

  const handlePreviewImage = (image) => {
    if (image instanceof File || image instanceof Blob) {
      setSelectedImage(URL.createObjectURL(image));
    } else {
      setSelectedImage(image);
    }
  };

  const handleCloseModal = () => {
    setSelectedImage(null);
  };

  const generateAndDownloadPDF = async (event) => {
    try {
      const doc = new jsPDF();

      // Set document properties
      doc.setProperties({
        title: `Event Details - ${event.name}`,
        subject: 'Event Management System',
        author: 'Your Company Name',
        keywords: 'event, details, management',
        creator: 'Event Management System',
      });

      // Add a colored header
      doc.setFillColor(41, 128, 185); // A nice blue color
      doc.rect(0, 0, 210, 40, 'F');

      // Add white text for the header
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(24);
      doc.text('Event Details', 105, 25, { align: 'center' });

      // Reset text color to black for the rest of the document
      doc.setTextColor(0, 0, 0);

      // Add event details in a styled table
      doc.autoTable({
        startY: 50,
        head: [['Property', 'Value']],
        body: [
          ['Name', event.name],
          ['Date', event.date],
          ['Time', event.time],
          ['Location', event.location],
        ],
        theme: 'striped',
        headStyles: { fillColor: [41, 128, 185], textColor: 255 },
        alternateRowStyles: { fillColor: [224, 224, 224] },
      });

      // Add image (if available)
      if (event.bannerImage) {
        let imgData;
        if (event.bannerImage instanceof File || event.bannerImage instanceof Blob) {
          imgData = await fetch(URL.createObjectURL(event.bannerImage)).then((res) => res.blob());
        } else {
          imgData = await fetch(event.bannerImage).then((res) => res.blob());
        }

        const base64 = await convertBlobToBase64(imgData);
        const imgHeight = 80;
        const pageHeight = doc.internal.pageSize.height;
        let imgY = doc.autoTable.previous.finalY + 10;

        // Check if there's enough space for the image, otherwise add a new page
        if (imgY + imgHeight > pageHeight) {
          doc.addPage();
          imgY = 20;
        }

        doc.addImage(base64, 'JPEG', 15, imgY, 180, imgHeight);

        // Add caption
        doc.setFontSize(10);
        doc.text('Event Banner', 105, imgY + imgHeight + 5, { align: 'center' });
      }

      // Add footer
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.setTextColor(150);
        doc.text(
          `Page ${i} of ${pageCount} - Generated by Events Management System`,
          105,
          doc.internal.pageSize.height - 10,
          { align: 'center' }
        );
      }

      // Download PDF
      const blob = await doc.output('blob');
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `event_${event.id}.pdf`;
      link.click();
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setPdfDownloadProgress(0);
    }
  };

  const convertBlobToBase64 = (blob) => {
    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result);
      reader.readAsDataURL(blob);
    });
  };

  const formatTimestamp = (timestamp) => {
    if (timestamp && typeof timestamp.toDate === 'function') {
      const date = timestamp.toDate();
      return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
    }
    return timestamp || 'N/A';
  };

  const filteredEvents = events && events.length > 0
    ? events.filter((event) =>
        event &&
        event.name &&
        typeof event.name === 'string' &&
        event.name.toLowerCase().includes((searchTerm || '').toLowerCase())
      ).map(formatEventData)
    : [];

  return (
    <div className="p-6">
      <h2 className="text-3xl font-bold mb-6">Events Management</h2>
      <div className="bg-white p-6 rounded-lg shadow-md">
        <div className="flex justify-between items-center mb-6 space-x-4">
          <input
            type="text"
            placeholder="Search events..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="border border-gray-300 rounded-lg px-4 py-2 w-full md:w-64 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 ease-in-out"
          />
          <button onClick={() => setIsEventFormOpen(true)} className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition duration-300">
            Add New Event
          </button>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Banner</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredEvents.map((event) => (
                <tr key={event.id} className="hover:bg-gray-50 transition duration-200 ease-in-out">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{event.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{new Date(event.date).toLocaleDateString()}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{event.time}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{event.location}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-center">
                    {event.bannerImage && (
                      <img
                        src={
                          event.bannerImage instanceof File || event.bannerImage instanceof Blob
                            ? URL.createObjectURL(event.bannerImage)
                            : event.bannerImage
                        }
                        alt="Event Banner"
                        className="w-24 h-16 object-cover cursor-pointer"
                        onClick={() => handlePreviewImage(event.bannerImage)}
                      />
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium flex items-center space-x-2">
                    <button onClick={() => handleEditEvent(event)} className="text-blue-600 hover:text-blue-800 px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 hover:bg-blue-200 transition duration-300">Edit</button>
                    <button onClick={() => handleDeleteEvent(event.id)} className="text-red-600 hover:text-red-800 px-3 py-1 rounded-full text-xs font-semibold bg-red-100 hover:bg-red-200 transition duration-300">Delete</button>
                    <button onClick={() => generateAndDownloadPDF(event)} className="text-green-600 hover:text-green-800 px-3 py-1 rounded-full text-xs font-semibold bg-green-100 hover:bg-green-200 transition duration-300">PDF</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Image Preview Modal */}
      {selectedImage && (
        <Modal onClose={handleCloseModal}>
          <img src={selectedImage} alt="Event Banner" className="max-w-full h-auto mx-auto" />
        </Modal>
      )}

      {/* Progress indicator for PDF download */}
      {pdfDownloadProgress > 0 && (
        <div className="mt-4 p-4 bg-green-100 text-green-800 rounded-lg">
          PDF Download Progress: {pdfDownloadProgress.toFixed(2)}%
        </div>
      )}
    </div>
  );
};

export default EventsContent;
